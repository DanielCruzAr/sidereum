pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        PROXY_TAG_VALUE = 'sdngx'
        API_TAG_VALUE = 'sddck'
        HOSTED_ZONE_ID = 'Z01771952W5HAEISIGXT3'
        SUBDOMAIN_NAME = 'sidereum.cruzard.com'
    }

    stages {
        stage ('Get Instances IPs') {
            steps {
                withAWS(credentials: 'AWS', region: env.AWS_REGION) {
                    script {
                        def proxyInstance = sh(
                            script: "aws ec2 describe-instances --filters 'Name=tag:ID,Values=${env.PROXY_TAG_VALUE}' \
                                      --query 'Reservations[0].Instances[0].PublicIpAddress' --output text",
                            returnStdout: true
                        ).trim()
                        def apiInstance = sh(
                            script: "aws ec2 describe-instances --filters 'Name=tag:ID,Values=${env.API_TAG_VALUE}' \
                                      --query 'Reservations[0].Instances[0].PrivateIpAddress' --output text",
                            returnStdout: true
                        ).trim()
                        env.API_IP = apiInstance
                        env.PROXY_IP = proxyInstance
                        writeFile file: 'change-batch.json', text: """
                        {
                            "Changes": [
                                {
                                    "Action": "UPSERT",
                                    "ResourceRecordSet": {
                                        "Name": "${env.SUBDOMAIN_NAME}",
                                        "Type": "A",
                                        "TTL": 60,
                                        "ResourceRecords": [{"Value": "${proxyInstance}"}]
                                    }
                                }
                            ]
                        }
                        """
                    }
                }
            }
        }

        // stage ('Update subdomain configuration') {
        //     steps {
        //         withAWS(credentials: 'AWS', region: env.AWS_REGION) {
        //             script {
        //                 echo "Updating subdomain configuration for ${env.SUBDOMAIN_NAME}"
        //             }
        //             sh """
        //                 aws route53 change-resource-record-sets --hosted-zone-id ${env.HOSTED_ZONE_ID} \
        //                     --change-batch file://change-batch.json
        //             """
        //         }
        //     }
        // }

        // stage ('Wait for DNS Propagation') {
        //     steps {
        //         script {
        //             sleep time: 60, unit: 'SECONDS'
        //             echo "Waiting for DNS propagation for ${env.SUBDOMAIN_NAME}..."
        //         }
        //     }
        // }

        stage ('Setup NGINX Proxy') {
            steps {
                script {
                    writeFile file: 'default.conf', text: """
                    server {
                        listen 443 ssl;
                        server_name ${env.SUBDOMAIN_NAME};
                        ssl_certificate /etc/letsencrypt/live/${env.SUBDOMAIN_NAME}/fullchain.pem;
                        ssl_certificate_key /etc/letsencrypt/live/${env.SUBDOMAIN_NAME}/privkey.pem;

                        location /api/ {
                            proxy_pass http://${env.API_IP}:8000/;
                            proxy_http_version 1.1;
                            proxy_set_header Upgrade \$http_upgrade;
                            proxy_set_header Connection 'upgrade';
                            proxy_set_header Host \$host;
                            proxy_cache_bypass \$http_upgrade;
                        }

                        # Prevent HTTPoxy attack
                        proxy_set_header Proxy "";
                    }
                    """
                }
                // sudo certbot --nginx -d ${env.SUBDOMAIN_NAME} --non-interactive --agree-tos --email cruzarciniega.d@gmail.com
                // sudo apt-get update
                sshagent(['aws-ssh-key-pair']) {
                    sh """
                    scp -o StrictHostKeyChecking=no ./default.conf ubuntu@${env.PROXY_IP}:/tmp/
                    ssh -o StrictHostKeyChecking=no ubuntu@${env.PROXY_IP} \\
                        "echo 'Creating NGINX configuration for ${env.SUBDOMAIN_NAME}...' && \\
                        sudo mv /tmp/default.conf /etc/nginx/conf.d/default.conf && \\
                        sudo nginx -t && \\
                        sudo systemctl restart nginx"
                    """
                }
            }
        }
    }
}