Parameters:
  ApiAmiId:
    Type: AWS::EC2::Image::Id
    Description: The ID of the AMI to use for this instance
  PublicSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet ID for the Nginx Proxy
  AppSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: Application Subnet ID for the Reservations API
  AlbSG:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security Group for the Application Load Balancer (NGINX Proxy)
  AppSG:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security Group for the Reservations API
  DataSG:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security Group for the RDS Database
  DataSubnetGroup:
    Type: String
    Description: RDS DB Subnet Group Name
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  EC2TagKey:
    Type: String
  EC2TagValue1:
    Type: String
  EC2TagValue2:
    Type: String
  DBName:
    Type: String
    NoEcho: true
    Description: Name of the database to create in the RDS instance
  DBPassword:
    Type: String
    NoEcho: true
    Description: Password for the database user

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-020cba7c55df1f615

Resources:
  NginxProxy:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: nginx-proxy
      InstanceType: t2.micro
      ImageId: !FindInMap
        - RegionMap
        - !Ref AWS::Region
        - AMI
      KeyName: !Ref KeyName
      Tags:
        - Key: !Ref EC2TagKey
          Value: !Ref EC2TagValue1
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnet
          GroupSet:
            - !Ref AlbSG
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          set -e

          # Update and install NGINX
          apt-get update -y
          apt-get install -y nginx

          # Start and enable NGINX
          systemctl start nginx
          systemctl enable nginx

          # Install Certbot (Snap recommended by Certbot)
          apt-get install -y snapd
          snap install core && snap refresh core
          snap install --classic certbot

          # Create symlink for Certbot
          ln -s /snap/bin/certbot /usr/bin/certbot

  ReservationsApi:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: !Ref EC2TagKey
          Value: !Ref EC2TagValue2
      InstanceType: t2.micro
      ImageId: !Ref ApiAmiId
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref AppSubnet
          GroupSet:
            - !Ref AppSG

  PostgresDb:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      Engine: postgres
      AllocatedStorage: 10
      DBName: !Ref DBName
      MasterUsername: postgres
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref DataSG
      DBSubnetGroupName: !Ref DataSubnetGroup
      PubliclyAccessible: false
      MultiAZ: false
